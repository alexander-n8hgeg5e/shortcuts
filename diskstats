#!/usr/bin/python3

field_desc= [
            "major",
            "minor",
            "name",
            "# of reads completed",
            "# of reads merged",
            "# of sectors read",
            "# of milliseconds spent reading",
            "# of writes completed",
            "# of writes merged",
            "# of sectors written",
            "# of milliseconds spent writing",
            "# of I/Os currently in progress",
            "# of milliseconds or jiffies spent doing I/Os",
            "weighted # of milliseconds spent doing I/Os",
            "# of discards completed",
            "# of discards merged",
            "# of sectors discarded",
            "# of milliseconds spent discarding",
            ]
from os.path import sep as psep
from pprint import pprint
from argparse import ArgumentParser
ap=ArgumentParser()
ap.add_argument(dest='devname',nargs=1)
ap.add_argument(dest='fields',nargs="+",type=int,help="interger indices")
ap.add_argument("-u","--unit",choices=["M","G","K","k","g","m","b","B","T","t"],help="if not specified sectors are unit as listed with -i",default=None)
ap.add_argument("-s","--sector-size",type=float,help="sector size in bytes required if unit specified")
ap.add_argument('-l',action="store_true",help="print available device names")
ap.add_argument('-i',action="store_true",help="print available field indices")
args=ap.parse_args()

def print_field_indices():
    for i in range(len(field_desc)):
        print("{} : {}".format(i,field_desc[i]))
if args.i:
    print("available field indices")
    print_field_indices()
    exit()

def print_available_dev_names():
    for k in name2_major_minor.keys():
        print(k)

with open("/proc/diskstats") as f:
    lines=f.read().strip().split("\n")

datadict={}
name2_major_minor={}
for line in lines:
    fields=line.split()
    major=fields[0]
    minor=fields[1]
    name=fields[2]
    if not major in datadict.keys():
        datadict.update({major:{}})
    if not minor in datadict[major].keys():
        datadict[major].update({minor:{}})
    names=field_desc
    values=fields
    d=dict([(i,j) for i,j in zip(names,values)])
    name2_major_minor.update({name:(major,minor)})
    datadict[major][minor].update(d)

if args.l:
    print("available dev names")
    print_available_dev_names()
    exit()

from sys import exit

try:
    major,minor = name2_major_minor[args.devname[0]]
except KeyError:
    print("KeyError, available keys:")
    print_available_dev_names()
    exit(1)
maxkeylen=0
printstuff=[]
for i in args.fields:
    try:
        k=field_desc[i]
        maxkeylen=max(len(k),maxkeylen)
        v=datadict[major][minor][k]
    except IndexError:
        print("IndexError, available indices:")
        print_field_indices()
        exit(1)
    printstuff.append((k,v))
for k,v in printstuff:
    postfix=""
    if not args.unit is None and k.lower().find("sectors") != -1:
        v=int(v)*args.sector_size
        if args.unit.upper() == "T":
            v=v/1024/1024/1024/1024
            postfix="Tb"
        elif args.unit.upper() == "G":
            v=v/1024/1024/1024
            postfix="Gb"
        elif args.unit.upper() == "M":
            v=v/1024/1024
            postfix="Mb"
        elif args.unit.upper() == "K":
            v=v/1024
            postfix="Kb"
        elif args.unit.upper() == "B":
            postfix="B"
        else:
            postfix="error"
    print(("{:"+str(maxkeylen)+"} = {} {}").format(k,v,postfix))
