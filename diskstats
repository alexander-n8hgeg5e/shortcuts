#!/usr/bin/python3

def sectors_rw(d,rw):
    if 'rate' in d and not d['rate'] is None:
        v,u=unitconv(d['rate'])
        r=f"{d['devname']} {rw} {v:8.2f} {u}/s"
        return r
    elif 'value' in d and not d['value'] is None:
        v,u=unitconv(d['value'])
        r=f"{d['devname']} {rw} {v:8.2f} {u}"
        return r



format_desc =   [
                 ( "major            ",         lambda x :  f'{x}                ')  ,
                 ( "minor            ",         lambda x :  f'{x}                ')  ,
                 ( "name             ",         lambda x :  f'{x}                ')  ,
                 ( "reads comp       ",         lambda x :  f'{x}                ')  ,
                 ( "reads merged     ",         lambda x :  f'{x}                ')  ,
                 ( "sectors read     ",         lambda x :  f'{sectors_rw(x,"r")}')  ,
                 ( "read time        ",         lambda x :  f'{x}                ')  ,
                 ( "writes comp      ",         lambda x :  f'{x}                ')  ,
                 ( "writes merged    ",         lambda x :  f'{x}                ')  ,
                 ( "sectors written  ",         lambda x :  f'{sectors_rw(x,"w")}')  ,
                 ( "write time       ",         lambda x :  f'{x}                ')  ,
                 ( "iops             ",         lambda x :  f'{x}                ')  ,
                 ( "iops time        ",         lambda x :  f'{x}                ')  ,
                 ( "iops time wght   ",         lambda x :  f'{x}                ')  ,
                 ( "discards comp    ",         lambda x :  f'{x}                ')  ,
                 ( "discards merged  ",         lambda x :  f'{x}                ')  ,
                 ( "sectors discarded",         lambda x :  f'{x}                ')  ,
                 ( "discarding time  ",         lambda x :  f'{x}                ')  ,
                ]

field_desc=[i[0] for i in format_desc]

def unitconv(v):
    v=int(v)*args.sector_size
    if args.unit.upper() == "T":
        v=v/1024/1024/1024/1024
        postfix="Tb"
    elif args.unit.upper() == "G":
        v=v/1024/1024/1024
        postfix="Gb"
    elif args.unit.upper() == "M":
        v=v/1024/1024
        postfix="Mb"
    elif args.unit.upper() == "K":
        v=v/1024
        postfix="Kb"
    elif args.unit.upper() == "B":
        postfix="B"
    else:
        postfix="error"
    return v,postfix

from os.path import sep as psep
from pprint import pprint
from argparse import ArgumentParser
ap=ArgumentParser()
ap.add_argument("-d","--devnames",nargs='+',type=str)
ap.add_argument('-f','--fields',nargs="+",type=int,help="interger indices",default=[5,9])
ap.add_argument("-u","--unit",choices=["M","G","K","k","g","m","b","B","T","t"],help="if not specified sectors are unit as listed with -i",default='m')
ap.add_argument("-s","--sector-size",type=float,help="sector size in bytes required if unit specified",default=512)
ap.add_argument('-l',"--list",action="store_true",help="print available device names")
ap.add_argument('-i',action="store_true",help="print available field indices")
ap.add_argument('-w','--watch',action="store_true",help="watch",default=True)
ap.add_argument('-r','--rate',action="store_true",help="show rate only",default=True)
ap.add_argument('-n','--repeat-time',type=float,help="watch",default=2)
args=ap.parse_args()
if args.watch:
    from time import time
    from sys import stdout
    delete_line=0x1b5b314b.to_bytes(4,'big')
    one_line_up=0x1b4d.to_bytes(2,'big')
    cr=0x0d.to_bytes(1,'big')
    from re import sub


def print_field_indices():
    for i in range(len(field_desc)):
        print("{} : {}".format(i,field_desc[i]))
if args.i:
    print("available field indices")
    print_field_indices()
    exit()

def print_available_dev_names():
    for k in name2_major_minor.keys():
        print(k)

datadict={}
name2_major_minor={}
first_run=True
pos=0
maxlen=0

while True:
    with open("/proc/diskstats") as f:
        lines=f.read().strip().split("\n")
    for line in lines:
        fields=line.split()
        major=fields[0]
        minor=fields[1]
        name=fields[2]
        name2_major_minor.update({name:(major,minor)})
        if not args.list:
            if not name in args.devnames:
                continue
        if not major in datadict.keys():
            datadict.update({major:{}})
        if not minor in datadict[major].keys():
            datadict[major].update({minor:{}})
        names=[i for i in field_desc]
        values=fields
        d={}
        i=0
        for i in range(len(names)):
            if i in args.fields:
                val=int(values[i])
                d.update({str(i):val})
                if args.watch:
                    t=time()
                    dmm = datadict[major][minor]
                    if not first_run:
                        rd=dmm[str(i)]
                        rate = (val-rd['last'])/(t-rd['t0'])
                    else:
                        rate=None
                    d.update({str(i):{'t0':t,'last': val ,'rate':rate}})
        datadict[major][minor].update(d)
    #pprint(datadict)
    first_run=False

    if args.list:
        print("available dev names")
        print_available_dev_names()
        exit()

    printstuff=[]
    for devname in args.devnames:
        try:
            major,minor = name2_major_minor[devname]
        except KeyError:
            print("KeyError, available keys:")
            print_available_dev_names()
            exit(1)
        for i in args.fields:
            try:
                vr=datadict[major][minor][str(i)]['rate']
                v=datadict[major][minor][str(i)]
            except IndexError:
                print("IndexError, available indices:")
                print_field_indices()
                exit(1)
            if args.watch:
                printstuff.append({'fi':i,'devname':devname,'rate':vr})
            if not args.rate:
                printstuff.append({'fi':i,'devname':devname,'value':v})

    lpi=0
    for p in printstuff:
        from time import sleep
        while pos > lpi:
            from time import sleep
            stdout.buffer.raw.write(one_line_up)
            pos -= 1
        while pos < lpi:
            stdout.buffer.raw.write(0x0a.to_bytes(1,'big'))
            pos+=1
        data2write=format_desc[p['fi']][1](p)
        data2write=data2write.encode()
        stdout.buffer.raw.write(delete_line)
        stdout.buffer.raw.write(cr)
        stdout.buffer.raw.write(data2write)
        lpi+=1
    if not args.watch:
        break
    sleep(args.repeat_time)
