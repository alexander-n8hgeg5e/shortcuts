#!/usr/bin/env python3
#elpau!! --fetchonly \
#(\
TMP_FETCH_FAILED_LIST_FILE_NAME="/tmp/fetch_failed_fetched_list"
LOG_LINE_COUNT=20000
GET_LOGFILES_CMD = [ 'sudo', 'ssh', 'syslogger', 'ls', '-1rt', '/var/log/syslog*']
def gen_get_log_cmd(filename):
    return [ 'ssh', 'syslogger', 'tail', '-n'+str(LOG_LINE_COUNT), filename]
def get_log(logfiles):
    datalines=[]
    for i in range(len(logfiles)):
        data = check_output(gen_get_log_cmd(logfiles[-1-i]))
        datalines+= data.splitlines()
        if len( datalines) >= LOG_LINE_COUNT:
            return datalines
#|grep 'Fetch failed for'\
#|sed -E 's/^.*Fetch failed for [\']([^\']+)[\'].*$/=\\1/'\
#)
from subprocess import check_output
from re import sub
from os import environ as env
env['ACCEPT_KEYWORDS']='**'
counter=0
BREAKCOUNT=3
atoms=[]
logfiles = check_output(GET_LOGFILES_CMD).decode().strip().split('\n')
logfiles = logfiles[-2:] if len(logfiles)>1 else logfiles
datalines = get_log(logfiles)
for line in datalines:
    line=line.decode(errors="replace")
    if line.find("Fetch failed for ") != -1:
        pkgname = sub('^.*Fetch failed for [\']([^\']+)[\'].*$','=\\1',line.strip())
        #print(f"found: \"{pkgname}\"")
        atoms.append(pkgname)

from pylib.list_utils import uniq
atoms=uniq(atoms)
print(f"Found {len(atoms)} atoms ...",end="")

done=[]
try:
    with open(TMP_FETCH_FAILED_LIST_FILE_NAME,"rt") as f:
        done_=f.read().strip().split("\n")
        for d in done_:
            dd=d.strip()
            if len(dd) > 0:
                done.append(dd)
except FileNotFoundError:
    pass


done=uniq(done)

#print(done)
print(f" and any {len(done)} atoms had been already fetched.")


idxes=[]
with open(TMP_FETCH_FAILED_LIST_FILE_NAME,"at") as f:
    start= f.tell() == 0 
    from subprocess import check_call,CalledProcessError
    for atom in atoms:
        if not atom in done:
            try: 
                check_call(['emerge','--nodeps','--verbose','--fetchonly','--getbinpkg=n',atom],env=env)
                if not atom in done:
                    if start:
                        f.write(atom)
                        start=False
                    else:
                        f.write("\n"+atom)
                    f.flush()
            except CalledProcessError as e:
                pass
