#!/usr/bin/env python3

PATTERN_FILENAME =        ".filterpatterns"
PATTERN_IGNORE_FILENAME = ".filterpatterns_ignore"

DEBUG_PATTERNFILES_FOUND  = 0b001
DEBUG_PATTERNFILES_TESTED = 0b010
DEBUG_SHOW_ALL_DIFF_FILES = 0b100

from subprocess import PIPE
from subprocess import check_output 
from sys import argv
from re import search,IGNORECASE
from sys import path
path.insert(0,"/var/src/pylib")
from pylib.file_utils.split import file2list_v2
from pylib.file_utils.split import data2list
from re import match
from hashlib import sha1
from collections import OrderedDict as OD
from argparse import ArgumentParser
from pylib.list_utils import uniq
import pathlib
import multiprocessing as mp
from os.path import dirname
from os.path import sep as psep
from os.path import exists
from os.path import commonprefix
from os.path import commonpath
from os.path import basename
from os.path import abspath
from os.path import expanduser
from os import getcwd

def get_dirpatterns(pathlib_dir):
    """
    returns the patterns defined inside one directory without parent dir ones
    """
    filepath_patterns_local        = f"{pathlib_dir}/{PATTERN_FILENAME}"
    filepath_patterns_ignore_local = f"{pathlib_dir}/{PATTERN_IGNORE_FILENAME}"
    if exists(filepath_patterns_local):
        if zzz.debug & DEBUG_PATTERNFILES_FOUND:
            print(f"reading pattern file: \"{filepath_patterns_local}\"")
        patterns_local        = file2list_v2(filepath_patterns_local)
    else: 
        if zzz.debug & DEBUG_PATTERNFILES_TESTED:
            print(f"no patternfile found: \"{filepath_patterns_local}\"")
        patterns_local = []
    if exists(filepath_patterns_ignore_local):
        if zzz.debug & DEBUG_PATTERNFILES_FOUND:
            print(f"reading ignorefile: \"{filepath_patterns_ignore_local}\"")
        patterns_ignore_local = file2list_v2(filepath_patterns_ignore_local)
    else:
        if zzz.debug & DEBUG_PATTERNFILES_TESTED:
            print(f"no ignorefile found: \"{filepath_patterns_ignore_local}\"")
        patterns_ignore_local = []
    return patterns_local,patterns_ignore_local

def get_patterns0():
    # global files inside homedir for patterns
    a , b = get_dirpatterns(expanduser("~"))
    patterns        = a
    patterns_ignore = b

    starting_point_dir = pathlib.Path('.')

    # current dir
    a,b = get_dirpatterns( starting_point_dir )
    patterns        += a
    patterns_ignore += b
    return patterns, patterns_ignore

def get_patterns1(filename):
    """
    get patterns that will be used for file/filename

    These include all defined in parent dirs up to the starting point dir
    that is the current workdir.
    """
    starting_point_dir = pathlib.Path(getcwd())
    dirpath  = abspath(dirname(filename))
    parts = pathlib.Path(dirpath).parts
    commonp = commonpath( (starting_point_dir , dirpath) )
    lcp = len(pathlib.Path(commonp).parts)
    parts = parts[ lcp:]
    patterns = []
    patterns_ignore = []
    for i in range(1,len(parts)):
        a,b = get_dirpatterns(psep.join(parts[:i]))
        patterns        += a
        patterns_ignore += b
    #print(patterns)
    #print(patterns_ignore)
    return patterns,patterns_ignore

def do_file(filename):
    global patterns
    global patterns_ignore
    a, b = get_patterns1(filename.decode())
    patterns        += a
    patterns_ignore += b
    found=[]
    if not pathlib.Path(str(filename)).is_dir():
        cmd = [ "git", "diff", ref , "--", filename ]
        lines = data2list(check_output(cmd))
        for line in lines:
            for kwd in patterns:
                if search(kwd,line,flags=IGNORECASE):
                    ignore = False
                    for ikwd in patterns_ignore:
                        # Ignore patterns/regexes need to match case.
                        # Ignoring something unintended would mean
                        # to miss a match.
                        if search(ikwd,line):
                            ignore = True
                            break
                    if not ignore:
                        hashme = b" ".join([filename,line,kwd])
                        msg=f'### file: "{filename}"\n'
                        msg+=f'### regex = "{kwd}"   vvv Check line below vvv\n'
                        msg+=str(line)
                        found.append((hashme,msg))
    return found

def main():
    global ref
    global patterns
    global patterns_ignore
    global zzz
    redundancy = 1
    ap=ArgumentParser()
    root = ap.add_mutually_exclusive_group()
    root.add_argument("--print-debug-masks",action="store_true")
    default_group = root.add_argument_group()
    default_group.add_argument("-i","--ignore",nargs="*")
    default_group.add_argument(dest="git_reference", nargs=1)
    default_group.add_argument("--debug", default=0, type=int ,help="bitmask in decimal enables one debug output per bit")
    zzz = ap.parse_args()
    if zzz.print_debug_masks:
        mlk=0
        ml=0
        for k in globals().keys():
            if k[:5]=="DEBUG":
                mlk=max(len(k),mlk)
                ml=max(len(str(globals()[k])),ml)
        for k in globals().keys():
            if k[:5]=="DEBUG":
                fs=f"{{:>{mlk}.{mlk}}} : {{:>{ml}}}"
                print(fs.format(k,globals()[k]))
        exit()
    ref = zzz.git_reference[0]


    files = data2list(check_output(["git", "diff", "--name-only" , ref ]))
    if zzz.debug & DEBUG_SHOW_ALL_DIFF_FILES:
        from pprint import pprint
        pprint(files)

    patterns, patterns_ignore  = get_patterns0()
    pool = mp.Pool()
    matches2print_l = pool.map(do_file, files)
    matches2print = OD()
    for thing in matches2print_l:
        for key,val in thing:
            # Hashing need to be done outside of the pool.
            # (because sha not pickleable it would need some hack)
            # The time consuming part are the git calls for
            # every file (made inside the pool)
            hashval = sha1(key).hexdigest()
            msg = val 
            matches2print[hashval]=msg
    
    hashes = list(matches2print)
    l = len(sha1(b"something").hexdigest())
    for k,v in matches2print.items():
        matches2print_without = matches2print.copy()
        matches2print_without.pop(k)
        for i in range(l-1, 0 , -1):
            if k[:i] in [ m[:i] for m in  matches2print_without]:
                break
        # actually minimum is i+1
        # to catch typos add one more
        # so in case of a typo
        # most likely nothing will be ignored
        here_minlen = i + 1 + redundancy
    
        if not zzz.ignore is None:
            do_continue=False
            for i in zzz.ignore:
                if k[:here_minlen] == i[:here_minlen]:
                    do_continue=True
                    break
            if do_continue:
                continue
        print(v)
        print(f'# hash = {k[:here_minlen]}\n')
        #print(f'# hash = {k[:here_minlen]}')

if __name__ == "__main__":
    main()




