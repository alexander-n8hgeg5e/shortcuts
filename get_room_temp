#!/usr/bin/env python3

from subprocess import check_output
from time import sleep
from re import match,sub
from math import floor

VERBOSE=False
DEBUG=False
PRECISION=0.1
MAXTRY=100
SAMPLESLEEP=0.05

CMD = [ 'gpio', '-t' ]

if DEBUG or VERBOSE:
    from sys import stderr

def get_temp1():
    outp=check_output(CMD)
    outp=outp.split(b'\n')
    temp=None
    for line in outp:
        if match(b'^T[=]',line):
            line=line.decode()
            if DEBUG:
                print("sensor outp: {}".format(line),file=stderr)
            temp=sub('^T[=]([0-9]+[.][0-9]+).*$','\\1',line)
            temp=float(temp)
    return temp

def get_temp(samples=1):
    done=False
    fails=0
    avgtemp=None
    temps=[]
    while not done and fails <= MAXTRY and len(temps) < samples:
        temp=get_temp1()
        if temp is None:
            fails+=1
        else:
            temps.append(temp)
        # calc avgtemp befor loop exit
        if VERBOSE:
            print(temps,file=stderr)
        if len(temps) > 0:
            avgtemp=sum(temps)/len(temps)
            # do check befor continue
            upper_index=len(temps)-1
            for ti in range(upper_index+1):
                if not ti <= upper_index:
                    break
                delta = temps[ti] - avgtemp
                delta = abs(delta)
                if delta > PRECISION:
                    bad_temp=temps.pop(ti)
                    if VERBOSE:
                        print('Discarded unstable temp measurement: '+str(bad_temp),file=stderr)
                    done=False
                    fails+=1
        sleep(SAMPLESLEEP)
    return avgtemp

def parse_args():
    from argparse import ArgumentParser as Ap
    ap=Ap()
    ap.add_argument("-s","--samples",action='store',type=int,default=1)
    global args
    args=ap.parse_args()

if __name__ == '__main__':
    parse_args()
    print("{:.2f}".format(get_temp(samples=args.samples)))
