#!/usr/bin/python3
#from sys import path
#path.insert(1,'/tmp/python_debug/pylib/')
from os import environ
from sys import argv
from sys import stdout
from shutil import get_terminal_size
from subprocess import check_output,call
from re import sub,match
import argparse
from pprint import pprint
from math import ceil
from pylib.argparse_utils import PassThroughArgumentParser,Action_disable,Action_set,Action_store_true_no_pass,Action_enable
debug=False
##
##TODO: detect if stdout is no terminal and disable output limit
##

n = 1.02
columns,rows=get_terminal_size()
f = round( n  * columns )

default_min_number_logentries = 10

py_escape_seq_pattern  =  b'(\x1B\[([0-9]{1,2}([;][0-9]{1,2})?)?[mK])' # 3 x "("

py_subst_args  = [ b'[ ]' + py_escape_seq_pattern +           b'{1,4}(\w+[/])?([_]*old_|(\w|[-/_]|[0-9])*[_]+old_)(\w|[-/_]|[0-9])*' + py_escape_seq_pattern +b'{1,4}([,]|[|])'  , b"" ]

def parse_args():
    output_conversions = {
                    'color': (lambda d,v: "--"+d + "=" + v ),
                    'max_count': (lambda d,v: "--max-count=" + v ),
                }
    # low overhead test if no debug
    if "--debug" in argv:
        global debug
        debug=True
        argv.remove("--debug")
    else:
        debug=False
    parser = PassThroughArgumentParser  (   
                                            description="git log helper tool, extends git branch cmd functionality",
                                            wrapped_cmd=['git','log'],
                                            dest_no_pass_through=['branch'],
                                            output_conversions=output_conversions,
                                            debug=debug,
                                        )
        
    parser.add_argument( "--color",action='store', default='always' )
    parser.add_argument( "-a", "--all",action="store_true", default=False )
    # because default is False and more likely, use the Action_enable
    # for the unlikely case to save cpu
    parser.add_argument( "-o","--not-filter-old-branches",action=Action_store_true_no_pass,default=False )
    parser.add_argument( "-O","--filter-old-branches",action=Action_disable("not_filter_old_branches") )
    parser.add_argument( "-dr"  ,  "--decoration-remotes", action=Action_store_true_no_pass,default=True)
    parser.add_argument( "-dR"  ,  "--decoration-no-remotes", action=Action_disable("decoration_remotes"))
    parser.add_argument( "-n"  ,  "--max-count", action='store',default=str(max(1,rows-3)))
    parser.add_argument( "-A" ,   "--no-all", action=Action_disable('all') )
    parser.add_argument( "-c" ,   "--compact", default=True,action=Action_store_true_no_pass)
    parser.add_argument( "-C" ,   "--no-compact", action=Action_disable("compact"))
    parser.add_argument( "-g" ,   "--reverse-graph", action=Action_store_true_no_pass)
    parser.add_argument( "-s" ,   "--simplify-by-decoration", action='store_true',default=False)
    parser.add_argument( "-d" ,   "--decorate", action='store_true',default=True)
    parser.add_argument( "-D" ,   "--no-decorate", action=Action_disable("decorate"))
    global args
    global prepared_args
    args = parser.parse_args()
    prepared_args = parser.get_prepared_args()

def gen_log_cmd():
    r = '%C(red)'
    g = '%C(green)'
    b = '%C(blue)'
    y = '%C(yellow)'
    o = '%C(#ffee00)'
    c = '%C(cyan)'
    cr = '%Creset'
    ca = '%C(auto)'
    w = '%C(white)'
    hash = b + '%h'+ cr
    date = g + '%cd' + cr
    refnames = ca + ' %D'+ cr +'|'
    subject = w + '%s'
    body = '%b'
    nl = '%n'
    S = cr + '|' + cr

    if not args.reverse_graph:
        cmd = ['git', 'log', '--reverse']
        prettystart = "--pretty=format:"
        pretty = prettystart + hash + S + date + S + '%aN' + S + refnames + subject
        cmd = cmd + [pretty]
    else:
        cmd = ['git_reverse_graph_color',]

    cmd = cmd +  ['--date=format:' + "%y%m%d|%H%M"]
    cmd = cmd + prepared_args
    
    if not args.not_filter_old_branches:
        # filter old
        # man FNMATCH.3 with FNM_PATHNAME=False p(* matches /)
        # git allowed branch chars, found by git check-ref-format
        # test was 3 char branch name "a[::char::]z"
        # excluding "/"
        git_branch_chars_pat='[]"!#$%&\'()+,.0123456789;<=>@ABCDEFGHIJKLMNOPQRSTUVWXYZ_`abcdefghijklmnopqrstuvwxyz{|}-]'
        gbcp=git_branch_chars_pat
        gbcp_x='*('+gbcp+')'
        gbcp_p='+('+gbcp+')'

        #old_patterns  = ["old_"+gbcp_x  ] # at start
        #old_patterns += ["old"+gbcp_x  ] # at start
        #old_patterns += [gbcp_x+"_old_"+gbcp_x] # middle
        old_patterns = ["old/"]
        old_patterns += ["old_"]
        old_pathes_begin  = ["refs/heads/"]
        if args.decoration_remotes:
            old_pathes_begin += ["refs/remotes/*/"]
            old_pathes_begin += ["refs/remotes/"]
        dec_ref_exclude_patterns=[]
        for i in old_pathes_begin:
            for j in old_patterns:
                dec_ref_exclude_patterns += [i+j+"*"]
        for pat in dec_ref_exclude_patterns:
            cmd+=["--decorate-refs-exclude="+pat]

    if not args.decoration_remotes:
        cmd+=["--decorate-refs-exclude=refs/remotes/*"]
    if debug:
        for thing in cmd:
            print(thing)
    return cmd

def filter(bytes):
    lines=bytes.split(b'\n')
    ret=[]
    ln=0
    for line in lines:
        ret.append(sub(*py_subst_args,line))
    return b"\n".join(ret)

class fold_unsused():
    pass
    #def parse_args():
    #    class Argument_imply_store_true_action(argparse.Action):
    #        def __init__(self,*z,**zz):
    #            super().__init__(*z,**zz)
    #        def __call__(self, parser, namespace, values, option_string):
    #            setattr(namespace, self.dest, True )
    #            if namespace.short:
    #                setattr(namespace,'simplify_by_decoration', True )
    #                setattr(namespace,'not_filter_old_branches', False )
    #            if namespace.simplify_by_decoration:
    #                namespace.git_log_args.append("--simplify-by-decoration")
    #    class Action_add_git_log_arg(argparse.Action):
    #        def __init__(self,*z,**zz):
    #            super().__init__(*z,**zz)
    #        def __call__(self, parser, namespace, values, option_string):
    #            if self.dest == "max_count":
    #                setattr(namespace, self.dest, values)
    #                namespace.git_log_args.append("-n"+str(values))
    #                return
    #            if self.dest == "git_log_args":
    #                for v in values:
    #                    if match("[-]\d",str(v)):
    #                        setattr(namespace,'max_count', v[1:] )
    #                    if not v in namespace.git_log_args and not v == "log":
    #                        namespace.git_log_args.append(v)
    #    class Argument_parser_double_help(argparse.ArgumentParser):
    #        def print_help(self,*z):
    #            super().print_help(*z)
    #            print()
    #            print("git log help:")
    #            print("-------------")
    #            print()
    #            call(['git' , 'log', '-h'])
    #    global args
    #    parser=Argument_parser_double_help("git log helper tool, extends git log functionality")
    #    parser.add_argument("-a",'--all',action='store_true',default=False)
    #    parser.add_argument('-n','--max-count', action=Action_add_git_log_arg, default=None)
    #    parser.add_argument("--simplify-by-decoration",action='store_true',default=False)
    #    parser.add_argument("-nf","--not-filter-old-branches",action='store_true',default=False)
    #    parser.add_argument("--debug",action='store_true',default=False)
    #    parser.add_argument("-s","--short",action=Argument_imply_store_true_action ,nargs=0, default=False, help="excludes --not-filter-old-branches and includes --simplify-by-decoration")
    #    parser.add_argument(dest='git_log_args', nargs="*", action=Action_add_git_log_arg , default=[] )
    #    args = parser.parse_args()
    #    if not args.all and args.max_count is None:
    #        args.git_log_args.append("-n"+str(max(default_min_number_logentries,ceil(rows*0.75))))
    pass

parse_args()

#if args.not_filter_old_branches:
stdout.buffer.write(check_output(gen_log_cmd()))
#else:
#    stdout.buffer.write(filter(check_output(gen_log_cmd())))


# vim: set foldmethod=indent foldlevel=0 foldnestmax=2 :
