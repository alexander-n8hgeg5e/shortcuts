#!/usr/bin/python3
from re import match,sub,search,DOTALL as DA
#from os import listdir
from os.path import isdir
from os import linesep
from pprint import pformat
from collections import OrderedDict as Od
import sys
sys.path.insert(0,"/var/src/pylib")
from pylib.log_utils import shorten_msg

MULTI_LINE_COMMENT_START = "(?P<c_start>[/][*]|--\[\[)"
MLCS=MULTI_LINE_COMMENT_START
MULTI_LINE_COMMENT_END = "(?P<c_end>[*][/]|[]][]])"
MLCE=MULTI_LINE_COMMENT_END
patterns={
        'startlinepattern' : '^(?P<pre>.*)'+MLCS+'[ ]*(?P<pymagic>def[ ]pystart[(][^)]*[)][:])(?P<code>.*)$',
        'endlinepattern' : '^(?P<code>.*)(?P<pymagic>pyend)(?P<space>[ ]*)'+MLCE+'(?P<post>.*)$',
        'at_pos_pattern' : '^(?P<pre>.*)'+MLCS+'(?P<space>[ ]*)(?P<pymagic>def[ ]*py[(][^)]*[)][:])(?P<code>.*)'+MLCE+'(?P<post>.*)$' ,
        }
ML0=100
from argparse import ArgumentParser
parser=ArgumentParser( description="generates *.pyout\"[.extension]\" files from *.pyin\"[.extension]\" files")
parser.add_argument( "--verbose",'-v',action="count", default=False )
parser.add_argument('files', metavar='files', nargs='*', type=str, help='input filenames without extension prefix , ".pyin"  ')
parser.add_argument( "--outfile-extension-prefix",'-o',action="store",type=str ,default=".pyout",help='infile.pyin.ext will result in a outfile.outfile-extension-prefix.ext' )
parser.add_argument( "--infile-extension-prefix",'-i',action="store", type=str, default=".pyin",help='use infile.infile-extension-prefix.ext as infile' )
args=parser.parse_args()
#files=listdir()

pyprep_msg =  ('   ||*\\\\\\   *\\       /* ||*\\\\\\   ||*\\\\\\    ||====*  ||*\\\\\\   '
               '||*\\\\\\   ** |\\     *|',
               '   ||    \\\\  \\\\     //  ||    \\\\ ||    \\\\  ||       ||    \\\\ ||    '
               '\\\\ || ||\\    ||',
               '   ||    ||   \\\\   //   ||    || ||    ||  ||       ||    || ||    || || '
               '||\\\\   ||',
               '   ||   //     \\\\ //    ||   //  ||   //   ||____   ||   //  ||   //  || '
               '|| \\\\  ||',
               '   ||*//        \\//     ||*//    ||==\\\\    ||====*  ||*//    ||*//    || '
               '||  \\\\ ||',
               '   ||           //      ||       ||   \\\\   ||       ||       ||       || '
               '||   \\\\||',
               '   ||          //       ||       ||    \\\\  ||       ||       ||       || '
               '||    \\||',
               '   **         */        **       ||     \\* ||====*  **       **       ** '
                '|*     \\|'
               )

def get_code(d):
    if not d["c"] is None:
        return d["c"]
    else:
        # deprecated stuff
        if not d['d']['code'] is None:
            return d['d']["code"]

def prepare_dict(d):
    d['c'] = None
    # deprecated stuff below
    d['d']['code'] = None
    return d

def load(data_dict):
    if "load_path" in data_dict.keys():
        with open(data_dict['load_path'],"rt") as f:
            return data_dict.update(eval(f.read()))
    return data_dict
def store(data_dict):
    if "store_path" in data_dict.keys():
        with open(data_dict['store_path'],"wt") as f:
            f.write(pformat(data_dict))

d={'d':{'code':None}, 'c': None }
def prepfile(in_file,out_file):
    global d
    linecounter=0
    started_at = None
    code=""
    with open(out_file,mode='wt') as of:
        with open(in_file,mode='rt') as inf:
            p0=0
            p1=1
            while p1 > p0:
                p0=inf.tell()
                line=inf.readline()
                linecounter+=1
                p1=inf.tell()
                m=search(patterns['at_pos_pattern'],line,flags=DA)
                if not m is None:
                    parts = m.groupdict()
                    if args.verbose:
                        fs="happy -> py code found at line={}, char={}"
                        print(fs.format(linecounter,1+len(''.join(m.groups()[:4]))))
                        print("code={}".format(repr(parts['code'])))

                    of.write(parts['pre'])
                    code='if True:'+ parts['code']
                    if args.verbose:
                        print("    exec prep code:")
                        print("         ==========")
                        print(code)
                        print("----------code-end-")
                    d=prepare_dict(d)
                    exec(code,d,d)
                    c=get_code(d)
                    if not c is None:
                        if args.verbose > 0:
                            print("at line {} following result will be inserted:".format(linecounter))
                            print("                     ======                  ")
                            if args.verbose > 1:
                                print(c)
                            else:
                                print(shorten_msg(c,ML0))
                            print("----result-end---")
                        of.write( c )
                        code=""
                    of.write( parts['post'] )
                    d=load(d)
                else:
                    m = match( patterns['startlinepattern'], line , flags=DA)
                    if not m is None:
                        # startline pattern found
                        # what is befor is normal file content
                        # that will be written to the outputfile (name here "of").
                        # What comes after "startline-keyword"
                        # will be used as start of the code
                        if args.verbose:
                            print("happy -> found startline at {} : {} ".format(linecounter, repr(line) ))
                        if started_at is None:
                            started_at = p1
                            startline = linecounter
                            parts=m.groupdict()
                            # add to code, do not reset
                            # code should be  allready the empty string
                            # provoke errors to reveal them
                            code+=parts['code']
                            of.write(parts['pre'])
                        else:
                            raise Exception("PyPrepSyntaxError: expecting end after start but found start.")
                    else:
                        m =  match(patterns['endlinepattern'],line,flags=DA)
                        if not m is None:
                            # endline pattern found
                            # what comes after the "endline-keyword"
                            # is normal file content
                            # that will be written to the outputfile (name here: "of")
                            # after the generated code will have been written.
                            # What comes befor the "endline-keyword"
                            # will be used as end of the code
                            if args.verbose:
                                print("    endline at: "+str(linecounter) )
                            if started_at is not None:
                                parts=m.groupdict()
                                code='if True:'+code+parts['code']
                                if args.verbose:
                                    print("    exec prep code:")
                                    print("         ==========")
                                    if args.verbose > 1:
                                        print(code)
                                    else:
                                        print(shorten_msg(code,ML0))
                                    print("----------code-end-")
                                # as exec is a function,
                                # to get the locals of exec
                                # give it the dict "d"
                                # as locals and globals
                                d=prepare_dict(d)
                                exec(code,d,d)
                                c=get_code(d)
                                if not c is None:
                                    if args.verbose > 0:
                                        print("at line {} following result will be inserted:".format(startline))
                                        print("                     ======")
                                        if args.verbose > 1:
                                            print(c)
                                        else:
                                            print(shorten_msg(c,ML0))
                                        print("----result-end---")
                                    of.write(c)
                                d=load(d)
                                code=""
                                started_at=None
                            else:
                                raise Exception("Pyprep Syntax Error:  end needs start befor")
                        else:
                            if started_at is not None:
                                code += line
                            else:
                                of.write(line)
            if not started_at is None:
                raise Exception("no end line found\n"+"startline was: "+str(startline))



files=args.files
for name in files:
    if search(".", name):
        extension=sub('.*([.][^.]+)$','\\1', name ) # inc "."
        base=sub('(^.*)[.][^.]*$','\\1', name )
    else:
        extension=""
        base=name
    infile  = base +args.infile_extension_prefix+extension
    outfile = base + args.outfile_extension_prefix+extension
    if args.verbose:
        print("generating "+outfile+" from "+infile+" ...")
    for line in pyprep_msg:
        print(line)
    prepfile( infile,outfile)
store(d)
                
                
                
 




# vim: set syntax=python foldmethod=marker    foldlevel=3    :  #{{{

