#!/usr/bin/python3
from re import match,sub,search
#from os import listdir
from os.path import isdir
from os import linesep
from pprint import pformat
patterns={
        'at_pos_pattern' : '[/][*]def[ ]py[(][^)]*[)][:].*[*][/]' ,
        'startlinepattern' : '^[ ]*[/][*]def[ ]pystart[(][^)]*[)][:][ ]*$',
        'endlinepattern' : '^.*pyend[*][/].*$' ,
        'startline_sub_pattern' : '^[ ]*[/][*](def[ ]pystart[(][^)]*[)][:])[ ]*$',
        'startline_replace_pattern' : '\\1\n',
        'at_pos_sub_pattern' :  '^.*[/][*](def[ ]py[(][^)]*[)][:])(.*)[*][/].*$' ,
        'at_pos_replace_pattern' : '\\2\n',
        }

from argparse import ArgumentParser
parser=ArgumentParser( description="generates *.pyout\"[.extension]\" files from *.pyin\"[.extension]\" files")
parser.add_argument( "--verbose",'-v',action="store_true", default=False )
parser.add_argument('files', metavar='files', nargs='*', type=str, help='input filenames without extension prefix , ".pyin"  ')
parser.add_argument( "--outfile-extension-prefix",'-o',action="store",type=str ,default=".pyout",help='infile.pyin.ext will result in a outfile.outfile-extension-prefix.ext' )
parser.add_argument( "--infile-extension-prefix",'-i',action="store", type=str, default=".pyin",help='use infile.infile-extension-prefix.ext as infile' )
args=parser.parse_args()
#files=listdir()

pyprep_msg =  ('   ||*\\\\\\   *\\       /* ||*\\\\\\   ||*\\\\\\    ||====*  ||*\\\\\\   '
               '||*\\\\\\   ** |\\     *|',
               '   ||    \\\\  \\\\     //  ||    \\\\ ||    \\\\  ||       ||    \\\\ ||    '
               '\\\\ || ||\\    ||',
               '   ||    ||   \\\\   //   ||    || ||    ||  ||       ||    || ||    || || '
               '||\\\\   ||',
               '   ||   //     \\\\ //    ||   //  ||   //   ||____   ||   //  ||   //  || '
               '|| \\\\  ||',
               '   ||*//        \\//     ||*//    ||==\\\\    ||====*  ||*//    ||*//    || '
               '||  \\\\ ||',
               '   ||           //      ||       ||   \\\\   ||       ||       ||       || '
               '||   \\\\||',
               '   ||          //       ||       ||    \\\\  ||       ||       ||       || '
               '||    \\||',
               '   **         */        **       ||     \\* ||====*  **       **       ** '
                '|*     \\|'
               )

def get_code_from_oneline(line):
    return sub(patterns['at_pos_sub_pattern'],patterns['at_pos_replace_pattern'],line)

def load(data_dict):
    if "load_path" in data_dict.keys():
        with open(data_dict['load_path'],"rt") as f:
            return data_dict.update(eval(f.read()))
    return data_dict
def store(data_dict):
    if "store_path" in data_dict.keys():
        with open(data_dict['store_path'],"wt") as f:
            f.write(pformat(data_dict))
#def use_file(file):
#    if match('[^/]+[.]c$',file) and not isdir(file):
#        return True
#    else:
#        return False

d={}
def prepfile(in_file,out_file):
    global d
    linecounter=0
    started_at = None
    code=""
    with open(out_file,mode='wt') as of:
        with open(in_file,mode='rt') as inf:
            p0=0
            p1=1
            while p1 > p0:
                p0=inf.tell()
                line=inf.readline()
                linecounter+=1
                p1=inf.tell()
                m=search(patterns['at_pos_pattern'],line)
                if not m is None:

                    exec_code = sub( patterns['at_pos_sub_pattern'], patterns['at_pos_replace_pattern'], m.string )
                    if args.verbose:
                        print("py code found at line,char "+str(linecounter)+","+str( m.start() )+" : \n" +exec_code)
                        print(line)

                    of.write( line[:m.start()])
                    d.update({'code' : None })
                    exec('if True:\n    '+exec_code+'\n' )
                    if not d['code'] is None:
                        of.write( d['code'] )
                    of.write( line[m.end():] )
                    d=load(d)

                elif match( patterns['startlinepattern'],line ):
                    if args.verbose:
                        print("startline at: "+str(linecounter) )
                    if started_at is None:
                        started_at = p1
                        startline = linecounter
                        #code+=sub(patterns['startline_sub_pattern'],patterns['startline_replace_pattern'], line )+linesep
                    else:
                        raise Exception("Pyprep Syntax Error: after start follows end not start")

                elif match(patterns['endlinepattern'],line):
                    if args.verbose:
                        print("    endline at: "+str(linecounter) )
                    if started_at is not None:
                        if args.verbose:
                            print(code)
                        d.update({'code' : None })
                        exec('if True:\n'+code+'\n' )
                        if not d['code'] is None:
                            of.write(d['code'])
                        d=load(d)
                        code=""
                        started_at=None
                    else:
                        raise Exception("Pyprep Syntax Error:  end needs start befor")
                else:
                    if started_at is not None:
                        code += line
                    else:
                        of.write(line)
                #print( linecounter,end="  " )
            if not started_at is None:
                raise Exception("no end line found\n"+"startline was: "+str(startline))



files=args.files
for name in files:
    if search(".", name):
        extension=sub('.*([.][^.]+)$','\\1', name ) # inc "."
        base=sub('(^.*)[.][^.]*$','\\1', name )
    else:
        extension=""
        base=name
    infile  = base +args.infile_extension_prefix+extension
    outfile = base + args.outfile_extension_prefix+extension
    if args.verbose:
        print("generating "+outfile+" from "+infile+" ...")
    for line in pyprep_msg:
        print(line)
    prepfile( infile,outfile)
store(d)
                
                
                
 




# vim: set syntax=python foldmethod=marker    foldlevel=3    :  #{{{

