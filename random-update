#!/usr/bin/env python3

FAILED_FILE_PATH = "/tmp/update_failed_list"
SUCCESSFULL_FILE_PATH = "/tmp/update_successfull_list"
GET_UPGRADEABLE_CMD_PREFIX  = [ 'eix', '-I']
GET_UPGRADEABLE_CMD_POSTFIX = [ '--format', '{upgrade=1}<category>/<name>\n{}' ]
SUCCESSFULL_END="successfull"
FAILED_END="failed"

def init():
    global LEN_FAILED_END
    global LEN_SUCCESSFULL_END
    LEN_FAILED_END=len(FAILED_END)
    LEN_SUCCESSFULL_END=len(SUCCESSFULL_END)
    parse_args()
    if args.simulated_test_run:
        global FAILED_FILE_PATH
        FAILED_FILE_PATH+='.test'

from random import choice as random_choice
from subprocess import check_output
from subprocess import check_call
from subprocess import CalledProcessError
from subprocess import PIPE
from subprocess import DEVNULL
from argparse import ArgumentParser
from sys import stdout
from os import get_terminal_size
from re import match
from os.path import exists

def parse_args():
    a=ArgumentParser()
    a.add_argument("-v","--verbose",action="store_true")
    a.add_argument("--simulated-test-run",action="store_true")
    a.add_argument(dest = "eix_expressions", default=["--system"],nargs="*")
    global args
    args=a.parse_args()
    if args.verbose:
        print("eix-expressions-todo: "+str(args.eix_expressions))

class UpdateFailed(Exception):
    pass

def get_random_pkg  (   eix_expression,
                        exclude_failed=[],
                        boost={'dev-libs': 5,'.*-libs':4},
                    ):
    exclude_successfull=get_successfull_list()
    get_upgradeable_cmd = GET_UPGRADEABLE_CMD_PREFIX \
                          + eix_expression.split(" ") \
                          + GET_UPGRADEABLE_CMD_POSTFIX
    outp = check_output(get_upgradeable_cmd)
    _pkgs = outp.decode().strip().split("\n")
    pkgs=[]
    for p in _pkgs:
        if not p in exclude_failed:
            if not p in exclude_successfull:
                lp=len(p)
                if lp > 0:
                    if p[0] not in '[ ':
                        if len(p) < 5 or p[0:5] != "Found":
                            category = p.split("/")[0]
                            found=False
                            for k in boost.keys():
                                if match(k,category):
                                    found=True
                                    for i in range(boost[k]):
                                        pkgs.append(p)
                                    break # only one boost for the first match in the boost dict
                            if not found:
                                pkgs.append(p)
    if len(pkgs) > 0:
        return random_choice(pkgs)
    else:
        return None

def add_to_failed_list(pkg):
    with open(FAILED_FILE_PATH,mode="at") as f:
        f.write("\n"+pkg)

def add_to_successfull_list(pkg):
    with open(SUCCESSFULL_FILE_PATH,mode="at") as f:
        f.write("\n"+pkg)
        
def get_failed_list():
    if exists(FAILED_FILE_PATH):
        with open(FAILED_FILE_PATH,mode="rt") as f:
            return f.read().strip().split("\n")
    else:
        return []

def get_successfull_list():
    if exists(SUCCESSFULL_FILE_PATH):
        with open(SUCCESSFULL_FILE_PATH,mode="rt") as f:
            return f.read().strip().split("\n")
    else:
        return []

def get_aligned_end( msg, end , space_right_of_end=2):
    add_space = get_terminal_size().columns - len(msg) - len(end) - space_right_of_end
    if add_space > 0:
        end = " " * add_space + end
    return end

def print_pos_aligned_end(msg,end):
    try:
        print(get_aligned_end(msg,end))
    except OSError:
        print(msg,end)

def update(pkg):
    try:
        if args.verbose:
            msg="updating "+pkg+" ... "
            print(msg, end="")
            stdout.flush()
        if not args.simulated_test_run:
            check_call(['ionice', '-c3', 'nice', '-n19', 'sudo', 'emerge', '--ask', 'n', '--nodeps', pkg ],stdout=DEVNULL,stderr=DEVNULL)
            add_to_successfull_list(pkg)
        else:
            if random_choice([True,False]):
                raise CalledProcessError(-1,"failed_test_cmd")
        if args.verbose:
            print_pos_aligned_end(msg,SUCCESSFULL_END)
    except CalledProcessError:
        if args.verbose:
            print_pos_aligned_end(msg,FAILED_END)
        raise UpdateFailed(pkg)

def clear_failed_list():
    f = open(FAILED_FILE_PATH,mode="wt")
    f.close()

def loop_eix_expression(eix_expression):
    while True:
        pkg=get_random_pkg(eix_expression, exclude_failed=get_failed_list())
        if pkg is None:
            clear_failed_list()
            continue
        else:
            try:
                update(pkg)
            except UpdateFailed:
                add_to_failed_list(pkg)
        
def main():
    init()
    for eix_expression in args.eix_expressions:
        if args.verbose:
            print('processing eix-expression: "'+eix_expression+'"')
        loop_eix_expression(eix_expression)

if __name__ == "__main__":
    main()
