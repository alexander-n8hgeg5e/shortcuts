#!/usr/bin/env python3

from argparse import ArgumentParser
ap=ArgumentParser()
ap.add_argument(dest="regex",help="regex to select files to include,otherwise all files are included",nargs="?",default='.*')
ap.add_argument("--nostrip",help="don't strip data after reading with python strip()",action="store_true")
ap.add_argument("--noconv",help="don't convert int/float convertable data after reading to int/float",action="store_true")
ap.add_argument("--write","-w",help="eval python code from stdin and write resulting dict to files. the filenames correspond to the dict keys",action="store_true")
ap.add_argument("--format-file","-f",default=None)
ap.add_argument("--path","-p",default='.')
ap.add_argument("--max","-m",type=int,default=64,help="max amount of data in byte per file. if the limit is exceeded the program will exit with failure status")
ap.add_argument("--silent-skip","-S", help="if data limit is reached , do not fail but skip the exceed of data",action="store_true")



def main():
    global args
    args=ap.parse_args()
    if args.write:
        write(path=args.path)
    else:
        read(path=args.path)


def read(path="."):
    from pprint import pprint
    data=_read(path=path,regex=args.regex,max_data_len=args.max,silent_skip=args.silent_skip,noconv=args.noconv,nostrip=args.nostrip,recursive=False)
    if args.format_file is None:
        pprint(data)
    else:
        import sys
        sys.path.insert(1,"/var/src/pylib")
        from pylib.dict_utils import format as format_dict
        with open(args.format_file) as ff:
            for line in format_dict(dict(data),ff.read()):
                print(line)

def write(path="."):
    from sys import stdin
    d=eval(stdin.read())
    global mkdir
    from os import mkdir
    _write(d,path=path,max_data_len=args.max,silent_skip=args.silent_skip)

import sys
#sys.path.insert(1,"/var/src/pylib")
from pylib.file_utils.dictfiles import write as _write
from pylib.file_utils.dictfiles import read as _read

if __name__=="__main__":
    main()
