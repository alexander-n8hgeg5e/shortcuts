#!/usr/bin/env python3

from sys import argv,exit,stderr
from subprocess import check_call,call,check_output,CalledProcessError,Popen,PIPE,DEVNULL
from os import environ
from time import sleep


class Logger():
    def __init__(self,facility,level):
        self.facility=facility
        self.level=level
        self.p=Popen( ["logger","-p", facility+"."+level ], stdin=PIPE )
        self.stdin=self.p.stdin
    def log(self,msg):
        self.p.stdin.write(msg.encode()+"\n",errors='replace')
        self.p.stdin.flush() 
    def __del__(self):
        self.stdin.close()
        self.p.terminate()
        sleep(1)
        self.p.kill()

def desktop2key(d):
    cmd=['hostname']
    if check_output(cmd).decode().strip()!='esadc':
        raise Exception( "ERROR: hostname need to be esadc." )
    if int(d)==0:
        return str(1)
    if int(d)==1:
        return str(3)

filenames={}
filenames.update({'spectrwm' : environ['HOME'] + '/.spectrwm.conf' })
filenames.update({ 'i3' : environ['HOME'] + '/.config/i3/config.part.esadc:0' })

patterns={}
i3_pat='bindsym[ ]*Ctrl[ ]*[+][ ]*Mod1[ ]*[+][ ]*[qe][ ]*workspace[ ]*[0-9]+'
spectrwm_pat='bind[^=]+[=][ ]*Mod1[ ]*[+][ ]*Control[ ]*[+][ ]*[qwert]'
patterns.update({'i3':i3_pat})
patterns.update({'spectrwm':spectrwm_pat})

def main():
    
    #if argv[1] == 'on':
    if args.command=='on':
        sed_on_cmds = {}
        for k,v in patterns.items():
            sed_on_cmds.update({ k : ['s/^[^#]*('+ v +')/#\\1/' ]})
    
        on_cmds={}
        for k,v in filenames.items():
            on_cmds.update({ k : ['sed','-i','-r', " ; ".join( sed_on_cmds[k] ), v ]})
    
        for v in on_cmds.values():
            check_call(v)
    
    #if argv[1] == 'off':
    if args.command=='off':
        sed_off_cmds = []
    
        sed_off_cmds = {}
        for k,v in patterns.items():
            sed_off_cmds.update({ k : ['s/^([ ]*)[#]*[# ]*[#]('+ v +')/\\1\\2/']})
    
        off_cmds={}
        for k,v in filenames.items():
            off_cmds.update({ k : ['sed','-i','-r', " ; ".join( sed_off_cmds[k] ), v ]})
    
        for v in off_cmds.values():
            check_call(v,stderr=DEVNULL)
    
        cmd=[ 'sudo', 'killall', 'synergys' ]
        call(cmd,stderr=DEVNULL) 
        cmd = ['sudo', 'killall', 'synergyc' ]
        call(cmd,stderr=DEVNULL)
        cmd = [ 'sudo', 'killall', 'synergy-core' ]
        call(cmd,stderr=DEVNULL)

    reload_wm()
   
def reload_wm():
    if args.debug:
        dd(environ)
    cmd = [ 'xdotool', 'get_desktop' ]
    desktop=check_output(cmd).decode().strip()
    cmds=[]
    cmds.append(['killall','-sHUP','spectrwm'])
    cmds.append(['i3-msg','-t','command','reload'])

    for cmd in cmds:
        try:
            #logger=Logger('user','debug')
            check_call(cmd,stderr=DEVNULL)

        except CalledProcessError:
            pass

    sleep(1)
    cmd = [ 'xdotool', 'key','ctrl+alt+' + desktop2key(desktop) ]
    #logger=Logger('user','debug')
    call(cmd,stderr=DEVNULL)

def parse_args():
    from argparse import ArgumentParser
    a=ArgumentParser()
    a.add_argument("-D",'--debug')
    a.add_argument(dest="command",choices=['on','off'])
    global args
    args=a.parse_args()

if __name__=='__main__':
    parse_args()
    if args.debug or 'DEBUG' in environ:
        from pylib.du import dd
    main()
